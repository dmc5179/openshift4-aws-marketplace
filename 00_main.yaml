AWSTemplateFormatVersion: 2010-09-09

Description: Calls OpenShift templates to create resources

Parameters:
  PullSecretJson:
    Description: OpenShift 4 Pull Secret JSON
    Type: String
    Default: "{}"
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access
    Type: AWS::EC2::KeyPair::KeyName
  VpcCidr:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-4]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-24.
    Default: 10.0.0.0/16
    Description: CIDR block for VPC.
    Type: String
  AvailabilityZoneCount:
    ConstraintDescription: "The number of availability zones. (Min: 1, Max: 3)"
    MinValue: 1
    MaxValue: 3
    Default: 3
    Description: "How many AZs to create VPC subnets for. (Min: 1, Max: 3)"
    Type: Number
  SubnetBits:
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/19-27.
    MinValue: 5
    MaxValue: 13
    Default: 12
    Description: "Size of each subnet to create within the availability zones. (Min: 5 = /27, Max: 13 = /19)"
    Type: Number
  ClusterName:
    AllowedPattern: ^([a-zA-Z][a-zA-Z0-9\-]{0,26})$
    MaxLength: 27
    MinLength: 1
    ConstraintDescription: Cluster name must be alphanumeric, start with a letter, and have a maximum of 27 characters.
    Description: A short, representative cluster name to use for host names and other identifying names.
    Type: String
    Default: "openshift"
  InfrastructureName:
    AllowedPattern: ^([a-zA-Z][a-zA-Z0-9\-]{0,26})$
    MaxLength: 27
    MinLength: 1
    ConstraintDescription: Infrastructure name must be alphanumeric, start with a letter, and have a maximum of 27 characters.
    Description: A short, unique cluster ID used to tag cloud resources and identify items owned or used by the cluster.
    Type: String
    Default: "abc123"
  HostedZoneId:
    Description: The Route53 public zone ID to register the targets with, such as Z21IXYZABCZ2A4.
    Type: String
    Default: ""
  HostedZoneName:
    Description: The Route53 zone to register the targets with, such as example.com. Omit the trailing period.
    Type: String
    Default: "example.com"
  OpenShiftVersion:
    Default: "4.6.20"
    Description: OpenShift Version Number
    Type: String
  S3BucketName:
    Description: S3 Bucket for config and ignition
    Type: String
    Default: "mybucket"
  S3BucketPath:
    Description: S3 Bucket path for config and ignition
    Type: String
    Default: "mypath"

##############################################

Mappings:
  RHELAmi:
    us-east-1:
      "HVM64": "ami-096fda3c22c1c990a"
    us-east-2:
      "HVM64": "ami-03d64741867e7bb94"
  AmzLinuxAmi:
    us-east-1:
      "HVM64": "ami-0915bcb5fa77e4892"
    us-east-2:
      "HVM64": "ami-09246ddb00c7c4fef"
  RHCOSAmi:  #RHCOS 4.6 AMIs for now
    us-east-1:
      "HVM64": "ami-0d150d6319d93985c"
    us-east-2:
      "HVM64": "ami-078da2ca2cc850ace"

# TODO: Placeholder for conditions
#Conditions:
#  CreateIAMResources: !Equals [ !Ref CreateIAMStack, true ]
#  CreateDNSResources: !Equals [ !Ref CreateElb, true ]
#  CreateAlarmResources: !Equals [ !Ref EnableAlarms, true ]
#  CreateStorageResources: !Not [ !Equals [!Ref NumberOfComputeStorages, 0]]
#  CreateStorageCloudwatch: !And
#  - !Condition CreateAlarmResources
#  - !Condition CreateStorageResources

Resources:

  VPCStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      #TemplateURL: !Join ["/", ["https:/", !Ref S3BucketName, ".s3.amazonaws.com", !Ref S3BucketPath, "01_vpc.yaml"]]
      TemplateURL: 'https://redhat-dan.s3.amazonaws.com/openshift4-marketplace/01_vpc.yaml'
      Parameters:
        InfrastructureName: !Ref InfrastructureName
        VpcCidr: !Ref VpcCidr
        AvailabilityZoneCount: !Ref AvailabilityZoneCount
        SubnetBits: !Ref SubnetBits

  HelperNodeWaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle
    Properties: {}

  HelperNodeWaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    DependsOn: VPCStack
    Properties:
      Handle: !Ref HelperNodeWaitHandle
      Timeout: 4500

  ClusterInfraStack:
    Type: AWS::CloudFormation::Stack
    DependsOn: VPCStack
    Properties:
      #TemplateURL: !Join ["/", ["https:/", !Ref S3BucketName, ".s3.amazonaws.com", !Ref S3BucketPath, "02_cluster_infra.yaml"]]
      TemplateURL: 'https://redhat-dan.s3.amazonaws.com/openshift4-marketplace/02_cluster_infra.yaml'
      Parameters:
        ClusterName: !Ref ClusterName
        InfrastructureName: !Ref InfrastructureName
        HostedZoneId: !Ref HostedZoneId
        HostedZoneName: !Ref HostedZoneName
        PublicSubnets: !GetAtt VPCStack.Outputs.PublicSubnetIds
        PrivateSubnets: !GetAtt VPCStack.Outputs.PrivateSubnetIds
        VpcId: !GetAtt VPCStack.Outputs.VpcId

  ClusterSecurityStack:
    Type: AWS::CloudFormation::Stack
    DependsOn: ClusterInfraStack
    Properties:
      #TemplateURL: !Join ["/", ["https:/", !Ref S3BucketName, ".s3.amazonaws.com", !Ref S3BucketPath, "03_cluster_security.yaml"]]
      TemplateURL: 'https://redhat-dan.s3.amazonaws.com/openshift4-marketplace/03_cluster_security.yaml'
      Parameters:
        InfrastructureName: !Ref InfrastructureName
        VpcCidr: !Ref VpcCidr
        VpcId: !GetAtt VPCStack.Outputs.VpcId
        PrivateSubnets: !GetAtt VPCStack.Outputs.PrivateSubnetIds

  HelperNodeStack:
    Type: AWS::CloudFormation::Stack
    DependsOn: ClusterSecurityStack
    Properties:
      #TemplateURL: !Join ["/", ["https:/", !Ref S3BucketName, ".s3.amazonaws.com", !Ref S3BucketPath, "03_heler_node.yaml"]]
      TemplateURL: 'https://redhat-dan.s3.amazonaws.com/openshift4-marketplace/03_heler_node.yaml'
      Parameters:
        ImageId: !FindInMap [AmzLinuxAmi, !Ref "AWS::Region", HVM64]
        KeyName: !Ref KeyName
        InfrastructureName: !Ref InfrastructureName
        PullSecretJson: !Ref PullSecretJson
        ClusterName: !Ref ClusterName
        HostedZoneName: !Ref HostedZoneName
        SignalUrl: !Ref HelperNodeWaitHandle
        S3BucketName: !Ref S3BucketName
        S3BucketPath: !Ref S3BucketPath

  ClusterBootstrapStack:
    Type: AWS::CloudFormation::Stack
    DependsOn: HelperNodeWaitCondition
    Properties:
      #TemplateURL: !Join ["/", ["https:/", !Ref S3BucketName, ".s3.amazonaws.com", !Ref S3BucketPath, "04_cluster_bootstrap.yaml"]]
      TemplateURL: 'https://redhat-dan.s3.amazonaws.com/openshift4-marketplace/04_cluster_bootstrap.yaml'
      Parameters:
        InfrastructureName: !Ref InfrastructureName
        RhcosAmi: !FindInMap [RHCOSAmi, !Ref "AWS::Region", HVM64]
        #AllowedBootstrapSshCidr:
        PublicSubnet: !Select
          - 0
          - !Split [ ",", !GetAtt VPCStack.Outputs.PublicSubnetIds ]
        MasterSecurityGroupId: !GetAtt ClusterSecurityStack.Outputs.MasterSecurityGroupId
        VpcId: !GetAtt VPCStack.Outputs.VpcId
        BootstrapIgnitionLocation: !Join [ '/', [ 's3:/', !Ref 'S3BucketName', !Ref S3BucketPath, 'ignition', 'bootstrap.ign' ] ]
        #AutoRegisterELB: "yes"
        RegisterNlbIpTargetsLambdaArn: !GetAtt ClusterInfraStack.Outputs.RegisterNlbIpTargetsLambda
        ExternalApiTargetGroupArn: !GetAtt ClusterInfraStack.Outputs.ExternalApiTargetGroupArn
        InternalApiTargetGroupArn: !GetAtt ClusterInfraStack.Outputs.InternalApiTargetGroupArn
        InternalServiceTargetGroupArn: !GetAtt ClusterInfraStack.Outputs.InternalServiceTargetGroupArn

  ClusterControlPlaneStack:
    Type: AWS::CloudFormation::Stack
    DependsOn: ClusterBootstrapStack
    Properties:
      #TemplateURL: !Join ["/", ["https:/", !Ref S3BucketName, ".s3.amazonaws.com", !Ref S3BucketPath, "05_cluster_master_nodes.yaml"]]
      TemplateURL: 'https://redhat-dan.s3.amazonaws.com/openshift4-marketplace/05_cluster_master_nodes.yaml'
      Parameters:
        InfrastructureName: !Ref InfrastructureName
        RhcosAmi: !FindInMap [RHCOSAmi, !Ref "AWS::Region", HVM64]
        #AutoRegisterDNS: "yes"
        PrivateHostedZoneId: !GetAtt ClusterInfraStack.Outputs.PrivateHostedZoneId
        PrivateHostedZoneName: !Join [ '.', [ !Ref 'ClusterName', !Ref 'HostedZoneName' ] ]
        Master0Subnet: !Select
          - 0
          - !Split [ ",", !GetAtt VPCStack.Outputs.PrivateSubnetIds ]
        Master1Subnet: !Select
          - 1
          - !Split [ ",", !GetAtt VPCStack.Outputs.PrivateSubnetIds ]
        Master2Subnet: !Select
          - 2
          - !Split [ ",", !GetAtt VPCStack.Outputs.PrivateSubnetIds ]
        MasterSecurityGroupId: !GetAtt ClusterSecurityStack.Outputs.MasterSecurityGroupId
        IgnitionLocation: !Join [ '/', [ 's3:/', !Ref 'S3BucketName', !Ref S3BucketPath, 'ignition', 'master.ign' ] ]
        #CertificateAuthorities:
        MasterInstanceProfileName: !GetAtt ClusterSecurityStack.Outputs.MasterInstanceProfile
        MasterInstanceType: 'm5.xlarge'
        #AutoRegisterELB: "yes"
        RegisterNlbIpTargetsLambdaArn: !GetAtt ClusterInfraStack.Outputs.RegisterNlbIpTargetsLambda
        ExternalApiTargetGroupArn: !GetAtt ClusterInfraStack.Outputs.ExternalApiTargetGroupArn
        InternalApiTargetGroupArn: !GetAtt ClusterInfraStack.Outputs.InternalApiTargetGroupArn
        InternalServiceTargetGroupArn: !GetAtt ClusterInfraStack.Outputs.InternalServiceTargetGroupArn

  ClusterApplicationPlaneStack:
    Type: AWS::CloudFormation::Stack
    DependsOn: ClusterControlPlaneStack
    Properties:
      #TemplateURL: !Join ["/", ["https:/", !Ref S3BucketName, ".s3.amazonaws.com", !Ref S3BucketPath, "06_cluster_worker_node.yaml"]]
      TemplateURL: 'https://redhat-dan.s3.amazonaws.com/openshift4-marketplace/06_cluster_worker_node.yaml'
      Parameters:
        InfrastructureName: !Ref InfrastructureName
        RhcosAmi: !FindInMap [RHCOSAmi, !Ref "AWS::Region", HVM64]
        Subnet: !Select
          - 0
          - !Split [ ",", !GetAtt VPCStack.Outputs.PrivateSubnetIds ]
        WorkerSecurityGroupId: !GetAtt ClusterSecurityStack.Outputs.WorkerSecurityGroupId
        IgnitionLocation: !Join [ '/', [ 's3:/', !Ref 'S3BucketName', !Ref S3BucketPath, 'ignition', 'worker.ign' ] ]
        #CertificateAuthorities:
        WorkerInstanceProfileName: !GetAtt ClusterSecurityStack.Outputs.WorkerInstanceProfile
        WorkerInstanceType: 'm5.2xlarge'

  ClusterApplicationPlaneStack2:
    Type: AWS::CloudFormation::Stack
    DependsOn: ClusterControlPlaneStack
    Properties:
      TemplateURL: !Join ["/", ["https:/", !Ref S3BucketName, ".s3.amazonaws.com", !Ref S3BucketPath, "06_cluster_worker_node.yaml"]]
      TemplateURL: 'https://redhat-dan.s3.amazonaws.com/openshift4-marketplace/06_cluster_worker_node.yaml'
      Parameters:
        InfrastructureName: !Ref InfrastructureName
        RhcosAmi: !FindInMap [RHCOSAmi, !Ref "AWS::Region", HVM64]
        Subnet: !Select
          - 1
          - !Split [ ",", !GetAtt VPCStack.Outputs.PrivateSubnetIds ]
        WorkerSecurityGroupId: !GetAtt ClusterSecurityStack.Outputs.WorkerSecurityGroupId
        IgnitionLocation: !Join [ '/', [ 's3:/', !Ref 'S3BucketName', !Ref S3BucketPath, 'ignition', 'worker.ign' ] ]
        #CertificateAuthorities:
        WorkerInstanceProfileName: !GetAtt ClusterSecurityStack.Outputs.WorkerInstanceProfile
        WorkerInstanceType: 'm5.2xlarge'

  ClusterApplicationPlaneStack3:
    Type: AWS::CloudFormation::Stack
    DependsOn: ClusterControlPlaneStack
    Properties:
      #TemplateURL: !Join ["/", ["https:/", !Ref S3BucketName, ".s3.amazonaws.com", !Ref S3BucketPath, "06_cluster_worker_node.yaml"]]
      TemplateURL: 'https://redhat-dan.s3.amazonaws.com/openshift4-marketplace/06_cluster_worker_node.yaml'
      Parameters:
        InfrastructureName: !Ref InfrastructureName
        RhcosAmi: !FindInMap [RHCOSAmi, !Ref "AWS::Region", HVM64]
        Subnet: !Select
          - 2
          - !Split [ ",", !GetAtt VPCStack.Outputs.PrivateSubnetIds ]
        WorkerSecurityGroupId: !GetAtt ClusterSecurityStack.Outputs.WorkerSecurityGroupId
        IgnitionLocation: !Join [ '/', [ 's3:/', !Ref 'S3BucketName', !Ref S3BucketPath, 'ignition', 'worker.ign' ] ]
        #CertificateAuthorities:
        WorkerInstanceProfileName: !GetAtt ClusterSecurityStack.Outputs.WorkerInstanceProfile
        WorkerInstanceType: 'm5.2xlarge'
